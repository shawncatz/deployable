namespace :database do
  desc "DEPLOYABLE: run db:backup"
  task :backup do
    on roles(:app) do
      within current_path do
        with rails_env: :production do
          rake "db:backup"
        end
      end
    end
  end

  desc "DEPLOYABLE: run db:backup and pull database dump"
  task :pull do
    app = fetch(:application)
    time = nil
    working = nil
    remote = nil
    dir = "/srv/apps/db/#{app}"
    invoke('database:backup')
    on roles(:app) do
      time = capture "cd #{dir} && ls -tr | tail -1"
      time.gsub!(/\.tgz$/, '')
      info "TIME: #{time}"
      remote = "#{dir}/#{time}.tgz"
      working = "/tmp/#{app}-db-#{time}"
      FileUtils.mkdir_p(working)
      download! remote, "#{working}/#{time}.tgz"
    end
    run_locally do
      execute <<-CMD
         rake db:drop && \
         rake cache:clear && \
         cd #{working} && \
         tar xvfz #{time}.tgz && \
         mongorestore -d #{app}_development #{time}/#{app}_production && \
         cd /tmp && rm -rf #{working}
      CMD
    end
  end

  #task :pull do
  #  app = fetch(:application)
  #  time = nil
  #  on roles(:app) do
  #    within "/srv/apps/db/#{app}" do
  #      time = capture 'ls -tr | tail -1'
  #    end
  #  end
  #  run_locally do
  #    execute <<-CMD
  #      scp shawn@#{host}:#{file} . && \
  #      tar xvfz #{time}.tgz && \
  #      rm -rf #{time}.tgz && \
  #      rake db:drop && \
  #      mongorestore -d #{app}_development #{time}/#{app}_production
  #    CMD
  #  end
  #end
end
