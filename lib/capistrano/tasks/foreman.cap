namespace :foreman do
  desc <<-DESC
    DEPLOYABLE: Export the Procfile to upstart.

    You can override any of these defaults by setting the variables shown below.

    set :foreman_cmd,          "foreman"
    set :foreman_format,       "upstart"
    set :foreman_location,     "/etc/init"
    set :foreman_port,         5000
    set :foreman_root,         -> { release_path }
    set :foreman_procfile,     -> { release_path.join('Procfile') }
    set :foreman_app,          -> { fetch(:application) }
    set :foreman_log,          -> { shared_path.join('log') }
    set :foreman_pids,         false
    set :foreman_concurrency,  false
    set :foreman_sudo,         false
    set :foreman_roles,        :all
    set :foreman_servers,      -> { release_roles(fetch(:foreman_roles)) }
  DESC
  task :export do
    on roles(:app) do |host|
      # within release_path do
      # within path doesn't work with the fucked up foreman setup
      foreman_cmd         = fetch(:foreman_cmd)
      foreman_concurrency = fetch(:foreman_concurrency)
      foreman_format      = fetch(:foreman_format)
      foreman_location    = fetch(:foreman_location)
      foreman_pids        = fetch(:foreman_pids)
      foreman_sudo        = fetch(:foreman_sudo)
      foreman_user        = fetch(:foreman_user, host.user)

      cmd = [:bundle, 'exec', "rvmsudo", foreman_cmd, 'export', foreman_format, foreman_location]
      # cmd = [foreman_cmd.to_sym, 'export',  foreman_format, foreman_location]
      cmd << %Q(-f #{fetch(:foreman_procfile)})
      cmd << %Q(-p #{fetch(:foreman_port)})
      cmd << %Q(-d #{fetch(:foreman_root)})
      cmd << %Q(-a #{fetch(:foreman_app)})
      cmd << %Q(-u #{foreman_user})
      cmd << %Q(-l #{fetch(:foreman_log)})
      cmd << %Q(-r #{foreman_pids}) if foreman_pids
      cmd << %Q(-c #{foreman_concurrency}) if foreman_concurrency
      # puts "CMD:#{cmd.inspect}"
      command = SSHKit::Command.new(*cmd).to_s
      puts "Command: #{command}"
      execute "cd #{release_path} && #{command}"
      # end
    end
  end

  desc 'DEPLOYABLE: Prefixes the foreman command with sudo when :foreman_sudo => true'
  task :configure_sudo do
    if fetch(:foreman_sudo)
      foreman_cmd = fetch(:foreman_cmd).to_s
      SSHKit.config.command_map.prefix[foreman_cmd].push('rvmsudo')
    end
  end

  desc 'DEPLOYABLE: restart app'
  task :start do
    if fetch(:foreman_format) == 'systemd'
      on roles fetch(:foreman_systemd_roles) do
        as "root" do
          execute :systemctl, "restart #{fetch(:application)}.target"
        end
      end
    else
      on roles(:app) do
        within release_path do
          app = fetch(:application)
          cmd = "sudo service #{app} start || sudo service #{app} stop && sudo service #{app} start"
          execute cmd
        end
      end
    end
  end

  desc 'DEPLOYABLE: start app'
  task :start do
    if fetch(:foreman_format) == 'systemd'
      on roles fetch(:foreman_systemd_roles) do
        as "root" do
          execute :systemctl, "start #{fetch(:application)}.target"
        end
      end
    else
      on roles(:app) do
        within release_path do
          app = fetch(:application)
          execute "sudo service #{app} start"
        end
      end
    end
  end

  desc 'DEPLOYABLE: stop app'
  task :start do
    if fetch(:foreman_format) == 'systemd'
      on roles fetch(:foreman_systemd_roles) do
        as "root" do
          execute :systemctl, "stop #{fetch(:application)}.target"
        end
      end
    else
      on roles(:app) do
        within release_path do
          app = fetch(:application)
          execute "sudo service #{app} stop"
        end
      end
    end
  end

  Capistrano::DSL.stages.each do |stage|
    after stage, 'foreman:configure_sudo'
  end

  namespace :load do
    task :defaults do
      set :foreman_cmd, :foreman
      set :foreman_format, "upstart"
      set :foreman_location, "/etc/init"
      set :foreman_port, 5000
      set :foreman_root, -> { release_path }
      set :foreman_procfile, -> { release_path.join('Procfile') }
      set :foreman_app, -> { fetch(:application) }
      set :foreman_log, -> { shared_path.join('log') }
      set :foreman_pids, false
      set :foreman_concurrency, false
      set :foreman_sudo, false
      set :foreman_roles, :all
      set :foreman_servers, -> { release_roles(fetch(:foreman_roles)) }
    end
  end

  namespace :deploy do
    #after :updated, 'foreman:export'
    after :restart, 'foreman:restart'
  end
end
